package GraphFramework;

import java.util.*;

public class MHPrimAlg extends MSTAlgorithm {
/*
     * This function implements Prim's algorithm using a min heap to find the minimum spanning tree of a graph.
     * The graph is represented as a list of Vertex objects, each with a char label.
     * 
     * @param graph The graph represented as a list of Vertex objects
     * @return The minimum spanning tree of the graph as a list of Edge objects
     */
    public  void prim( ArrayList<Vertex> vertices) {
        // Initialize the minimum spanning tree and the visited set
       
        Set<Vertex> visited = new HashSet<>();
        
        // Initialize the min heap with the first vertex and its edges
        PriorityQueue<Edge> minHeap = new PriorityQueue<>();
        visited.add(vertices.get(0));
         for (int i = 0; i < vertices.get(0).adjLists.size(); i++) {
            minHeap.add( vertices.get(0).adjLists.get(i));
        }
      
        
        
       // Loop until all vertices have been visited
        while (visited.size() < vertices.size() && !minHeap.isEmpty()) {
           
            // Get the minimum edge from the heap
            Edge minEdge = minHeap.poll();
            
            // Check if the edge connects a visited and an unvisited vertex
            Vertex v1 = minEdge.getSource();
            Vertex v2 = minEdge.getTarget();
            
            if (visited.contains(v1) && !visited.contains(v2)) {
                
               // Add the edge to the minimum spanning tree and add the unvisited vertex to the visited set
                MSTResultList.add(minEdge);
                visited.add(v2);
                
                // Add the unvisited vertex's edges to the heap
                minHeap.addAll(v2.getEdges());
            } else if (visited.contains(v2) && !visited.contains(v1)) {
                // Add the edge to the minimum spanning tree and add the unvisited vertex to the visited set
                MSTResultList.add(minEdge);
                visited.add(v1);
                
                // Add the unvisited vertex's edges to the heap
                minHeap.addAll(v1.getEdges());
            }
        }
        
        // calling the method that will print the results 
        displayResultingMST( MSTResultList);
    }

    //---------------------------------------------------------------------------------------------
    // method to diplay the MST information 
    // method that takes an `ArrayList` of `Edge` objects as its input parameter.
    // The method doesn't return anything, 
    // but instead print the information of the `MSTResultList` and `totalCost` variables 
    public void displayResultingMST( ArrayList<Edge> MSTResultList) {
        int totalCost = 0 ;
        System.out.println("The phone network (minimum spanning tree) generated by min-heap based Prim algorithm"
                + "is as follows:\n");

        // loop to go throuh the list that save the resulting edges 
        for (int i = 0; i < MSTResultList.size(); i++) {
            
            System.out.println("Office No." + MSTResultList.get(i).source.displayInfo() + " - Office No. " + MSTResultList.get(i).target.displayInfo()
                    + " : line length: " + MSTResultList.get(i).displayInfo());
            totalCost+=MSTResultList.get(i).displayInfo();
        }
        
        System.out.println("Total cost: " + totalCost + "\n");

    }
}
